package com.transactrules.accounts.runtime;

import com.transactrules.accounts.metadata.ScheduledTransactionTiming;
import com.transactrules.accounts.utilities.Solver;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.util.List;

public class {{name}} extends Account {

{{#positionTypes}}
    private Position _{{name}};
{{/positionTypes}}

{{#dateTypes}}
    private DateValue _{{name}};
{{/dateTypes}}

{{#amountTypes}}
    private AmountValue _{{name}};
{{/amountTypes}}

{{#optionTypes}}
    private OptionValue _{{name}};
{{/optionTypes}}

{{#rateTypes}}
    private RateValue _{{name}};
{{/rateTypes}}

{{#scheduleTypes}}
    private Schedule _{{name}};
{{/scheduleTypes}}

{{#instalmentTypes}}
    private InstalmentSet _{{name}};
{{/instalmentTypes}}

{{#positionTypes}}
    public BigDecimal {{name}}() {
        return _{{name}}.getAmount();
    }
{{/positionTypes}}

{{#dateTypes}}
    public LocalDate {{name}}(){
        return _{{name}}.getDate();
    }
{{/dateTypes}}

{{#amountTypes}}
    public BigDecimal {{name}}(){
        return _{{name}}.getAmount();
    }
{{/amountTypes}}

{{#optionTypes}}
    public String {{name}}(){
        return _{{name}}.getValue();
    }
{{/optionTypes}}

{{#scheduleTypes}}
    public Schedule {{name}}(){
        return _{{name}};
    }
{{/scheduleTypes}}

{{#instalmentTypes}}
    public InstalmentSet {{name}}(){
        return _{{name}};
    }
{{/instalmentTypes}}

{{#rateTypes}}
    public BigDecimal {{name}}(){
    return _{{name}}.getValue();
    }
{{/rateTypes}}

    @Override
    public void setCalculated() {

        super.setCalculated();

        //initialize dates

    {{#dateTypes}}
        _{{name}}= this.getDates().get("{{name}}");
    {{/dateTypes}}

        //initialize positions

    {{#positionTypes}}
        _{{name}} = new Position();
        this.getPositions().put("{{name}}", _{{name}});
    {{/positionTypes}}

        //initialize amounts

    {{#amountTypes}}
        _{{name}}= this.getAmounts().get("{{name}}");
    {{/amountTypes}}

        //initialize options

    {{#optionTypes}}
        _{{name}}= this.getOptions().get("{{name}}");
        _{{name}}.setValues({{optionListExpression}});
    {{/optionTypes}}

        //initialize rates
    {{#rateTypes}}
        _{{name}}= this.getRates().get("{{name}}");
    {{/rateTypes}}

        //initialize schedules

    {{#scheduleTypes}}
        if(!this.getSchedules().containsKey("{{name}}"))
        {
            Schedule schedule = new Schedule();
            this.getSchedules().put("{{name}}", schedule);
        }
        _{{name}} = this.getSchedules().get("{{name}}");
        _{{name}}.setBusinessDayCalculator(this.businessDayCalculator);
    {{#isCalculated}}
        Set{{name}}CalculatedProperties(_{{name}});
    {{/isCalculated}}
    {{^isCalculated}}
        Set{{name}}DefaultProperties(_{{name}});
    {{/isCalculated}}

    {{/scheduleTypes}}

    {{#instalmentTypes}}
        if(!this.getInstalmentSets().containsKey("{{name}}"))
        {
            _{{name}} = new InstalmentSet();
            this.getInstalmentSets().put("{{name}}", _{{name}});
        }
        else {
            _{{name}} = this.getInstalmentSets().get("{{name}}");
        }
    {{/instalmentTypes}}
    }

{{#instalmentTypes}}
    public void Initialize{{name}}(){
        for(LocalDate date : _{{scheduleTypeName}}.GetAllDates()){
            _{{name}}.getInstalments().put(date, new InstalmentValue( BigDecimal.ZERO, false));
        }
    }
{{/instalmentTypes}}

{{#scheduleTypes}}
    {{#isCalculated}}
public void Set{{name}}CalculatedProperties(Schedule schedule)
{
    schedule.setStartDate({{startDateExpression}});
    schedule.setInterval({{intervalExpression}});
    schedule.setBusinessDayCalculation("{{businessDayCalculation}}");
    schedule.setFrequency("{{scheduleFrequency}}");
    schedule.setEndType("{{scheduleEndType}}");
{{#hasEndDate}}
    schedule.setEndDate({{endDateExpression}});
{{/hasEndDate}}
{{#hasNumberOfRepeatsExpression}}
    schedule.setNumberOfRepeats({{numberOfRepeatsExpression}});
{{/hasNumberOfRepeatsExpression}}
}
{{/isCalculated}}
{{^isCalculated}}

public void Set{{name}}DefaultProperties(Schedule schedule)
{
    schedule.setBusinessDayCalculation("{{businessDayCalculation}}");
    schedule.setFrequency("{{scheduleFrequency}}");
    schedule.setEndType("{{scheduleEndType}}");
{{#hasStartDateExpression}}
    schedule.setStartDate({{startDateExpression}});
{{/hasStartDateExpression}}
{{#hasEndDateExpression}}
    schedule.setStartDate({{endDateExpression}});
{{/hasEndDateExpression}}
{{#hasIntervalExpression}}
    schedule.setInterval({{intervalExpression}});
{{/hasIntervalExpression}}
{{#hasNumberOfRepeatsExpression}}
    schedule.setNumberOfRepeats({{numberOfRepeatsExpression}});
{{/hasNumberOfRepeatsExpression}}
}
{{/isCalculated}}
{{/scheduleTypes}}

    @Override
    public void processTransaction(String transactionTypeName, BigDecimal amount){

        switch(transactionTypeName) {
{{#transactionTypes}}
            case "{{name}}":
    {{#transactionRules}}
        {{^maximumPrecision}}
                amount = amount.setScale(2, RoundingMode.HALF_DOWN);
        {{/maximumPrecision}}
        {{#add}}
                _{{positionTypeName}}.add(amount);
        {{/add}}
        {{#subtract}}
                _{{positionTypeName}}.subtract(amount);
        {{/subtract}}
    {{/transactionRules}}
                break;
{{/transactionTypes}}
            default:
                throw new IllegalArgumentException("Invalid transactionTypeName : " + transactionTypeName);
        }
    }

    @Override
    public void startOfDay() {

{{#scheduledTransactions}}
{{#isStartOfDay}}
    {{#hasSchedule}}
        if (_{{scheduleTypeName}}.isDue(valueDate)){
            BigDecimal amount = {{amountExpression}};
            createTransaction("{{transactionTypeName}}", amount);
        }
    {{/hasSchedule}}
    {{#hasDate}}
        if (_{{dateTypeName}}.isDue(valueDate)){
            BigDecimal amount = {{amountExpression}};
            createTransaction("{{transactionTypeName}}", amount);
        }
    {{/hasDate}}
{{/isStartOfDay}}
{{/scheduledTransactions}}
{{#instalmentTypes}}
    {{#isStartOfDay}}
        if({{name}}().getInstalments().containsKey(valueDate)){
            InstalmentValue instalmentValue={{name}}().getInstalments().get(valueDate);
            createTransaction("{{transactionTypeName}}",instalmentValue.getAmount());
        }
    {{/isStartOfDay}}
{{/instalmentTypes}}
    }



    @Override
    public void endOfOfDay() {
{{#scheduledTransactions}}
    {{#isEndOfDay}}
        {{#hasSchedule}}
            if (_{{scheduleTypeName}}.isDue(valueDate)){
                BigDecimal amount = {{amountExpression}};
                createTransaction("{{transactionTypeName}}", amount);
            }
        {{/hasSchedule}}
        {{#hasDate}}
            if (_{{dateTypeName}}.isDue(valueDate)){
                BigDecimal amount = {{amountExpression}};
                createTransaction("{{transactionTypeName}}", amount);
            }
        {{/hasDate}}
    {{/isEndOfDay}}
{{/scheduledTransactions}}
{{#instalmentTypes}}
    {{#isEndOfDay}}
            if(_{{name}}.getInstalments().containsKey(valueDate)){
                InstalmentValue instalmentValue= _{{name}}.getInstalments().get(valueDate);
                createTransaction("{{transactionTypeName}}",instalmentValue.getAmount());
            }
    {{/isEndOfDay}}
{{/instalmentTypes}}
    }

    @Override
    public void onDataChanged() {

    }

    @Override
    public void calculateInstaments() {
    {{#instalmentTypes}}
        if (_{{name}}.getInstalments().size()==0){
            Initialize{{name}}();
        }
    {{/instalmentTypes}}
    {{#instalmentTypes}}
        Calculate{{name}}Instalments();
    {{/instalmentTypes}}
    }

{{#instalmentTypes}}
    public BigDecimal GetClosingBalanceFor{{name}}(BigDecimal value) {

        this.setFutureInstalmentValue("{{name}}", ScheduledTransactionTiming.{{timingEnum}}, value);

        List<LocalDate> dates = _{{scheduleTypeName}}.GetAllDates();

        LocalDate lastDate = dates.get(dates.size()-1);

        this.snapshot();

        this.forecast(lastDate);

        BigDecimal result = Principal();

        this.restoreSnapshot();

        return result;
    }
{{/instalmentTypes}}

{{#instalmentTypes}}
    public void Calculate{{name}}Instalments() {
        Solver solver = new Solver();
        BigDecimal amount = solver.FindFunctionZero( this::GetClosingBalanceFor{{name}},  BigDecimal.ZERO, BigDecimal.valueOf(1000000000000000L), BigDecimal.valueOf(0.01) );
    }
{{/instalmentTypes}}
    @Override
    public String generatedAt(){
        return "{{#currentTimestamp}}generate{{/currentTimestamp}}";
    }
}