package com.transactrules.accounts.runtime;

import com.transactrules.accounts.metadata.AccountType;
import com.transactrules.accounts.metadata.TransactionType;

import java.math.BigDecimal;
import java.time.LocalDate;

public class {{name}} extends Account {

{{#positionTypes}}
    private Position _{{name}};
{{/positionTypes}}

{{#dateTypes}}
    private DateValue _{{name}};
{{/dateTypes}}

{{#amountTypes}}
    private AmountValue _{{name}};
{{/amountTypes}}

{{#optionTypes}}
    private OptionValue _{{name}};
{{/optionTypes}}

{{#rateTypes}}
    private RateValue _{{name}};
{{/rateTypes}}

{{#scheduleTypes}}
    private Schedule _{{name}};
{{/scheduleTypes}}

{{#positionTypes}}
    public BigDecimal {{name}}() {
        return _{{name}}.getAmount();
    }
{{/positionTypes}}

{{#dateTypes}}
    public LocalDate {{name}}(){
        return _{{name}}.getDate();
    }
{{/dateTypes}}

{{#amountTypes}}
    public BigDecimal {{name}}(){
        return _{{name}}.getAmount();
    }
{{/amountTypes}}

{{#optionTypes}}
    public String {{name}}(){
        return _{{name}}.getValue();
    }
{{/optionTypes}}


{{#scheduleTypes}}
    public Schedule {{name}}(){
        return _{{name}};
    }
{{/scheduleTypes}}

{{#rateTypes}}
    public BigDecimal {{name}}(){
    return _{{name}}.getValue();
    }
{{/rateTypes}}

    @Override
    public void setCalculated() {

        super.setCalculated();

        //initialize dates

    {{#dateTypes}}
        _{{name}}= this.getDates().get("{{name}}");
    {{/dateTypes}}

        //initialize positions

    {{#positionTypes}}
        _{{name}}= this.getPositions().get("{{name}}");
    {{/positionTypes}}

        //initialize amounts

    {{#amountTypes}}
        _{{name}}= this.getAmounts().get("{{name}}");
    {{/amountTypes}}

        //initialize options

    {{#optionTypes}}
        _{{name}}= this.getOptions().get("{{name}}");
        _{{name}}.setValues({{optionListExpression}});
    {{/optionTypes}}

        //initialize rates
    {{#rateTypes}}
        _{{name}}= this.getRates().get("{{name}}");

    {{/rateTypes}}

        //initialize schedules

    {{#scheduleTypes}}
        if(!this.getSchedules().containsKey("{{name}}"))
        {
            Schedule schedule = new Schedule();
            this.getSchedules().put("{{name}}", schedule);
        }
        _{{name}} = this.getSchedules().get("{{name}}");
        _{{name}}.setBusinessDayCalculator(this.businessDayCalculator);
    {{#isCalculated}}
        Set{{name}}CalculatedProperties(_{{name}});
    {{/isCalculated}}
    {{^isCalculated}}
        Set{{name}}DefaultProperties(_{{name}});
    {{/isCalculated}}

    {{/scheduleTypes}}
    }


{{#scheduleTypes}}
    {{#isCalculated}}
public void Set{{name}}CalculatedProperties(Schedule schedule)
{
    schedule.setStartDate({{startDateExpression}});
    schedule.setInterval({{intervalExpression}});
    schedule.setBusinessDayCalculation("{{businessDayCalculation}}");
    schedule.setFrequency("{{scheduleFrequency}}");
    schedule.setEndType("{{scheduleEndType}}");
{{#hasEndDate}}
    schedule.setEndDate({{endDateExpression}});
{{/hasEndDate}}
{{#hasNumberOfRepeatsExpression}}
    schedule.setNumberOfRepeats({{numberOfRepeatsExpression}});
{{/hasNumberOfRepeatsExpression}}
}
{{/isCalculated}}
{{^isCalculated}}

public void Set{{name}}DefaultProperties(Schedule schedule)
{
    schedule.setBusinessDayCalculation("{{businessDayCalculation}}");
    schedule.setFrequency("{{scheduleFrequency}}");
    schedule.setEndType("{{scheduleEndType}}");
{{#hasStartDateExpression}}
    schedule.setStartDate({{startDateExpression}});
{{/hasStartDateExpression}}
{{#hasEndDateExpression}}
    schedule.setStartDate({{endDateExpression}});
{{/hasEndDateExpression}}
{{#hasIntervalExpression}}
    schedule.setInterval({{intervalExpression}});
{{/hasIntervalExpression}}
{{#hasNumberOfRepeatsExpression}}
    schedule.setNumberOfRepeats({{numberOfRepeatsExpression}});
{{/hasNumberOfRepeatsExpression}}
}
{{/isCalculated}}
{{/scheduleTypes}}

    @Override
    public void processTransaction(String transactionTypeName, BigDecimal amount){

        switch(transactionTypeName) {
{{#transactionTypes}}
            case "{{name}}":
    {{#transactionRules}}
        {{#add}}
                _{{posititonTypeName}}.add(amount);
        {{/add}}
        {{#subtract}}
                _{{posititonTypeName}}.subtract(amount);
        {{/subtract}}
    {{/transactionRules}}
                break;
{{/transactionTypes}}
            default:
                throw new IllegalArgumentException("Invalid transactionTypeName : " + transactionTypeName);
        }
    }

    @Override
    public void startOfDay() {

{{#scheduledTransactions}}
{{#isStartOfDay}}
    {{#hasSchedule}}
        if (_{{scheduleTypeName}}.isDue(valueDate)){
            BigDecimal amount = {{amountExpression}};
            createTransaction("{{transactionTypeName}}", amount);
        }
    {{/hasSchedule}}
    {{#hasDate}}
        if (_{{dateTypeName}}.isDue(valueDate)){
            BigDecimal amount = {{amountExpression}};
            createTransaction("{{transactionTypeName}}", amount);
        }
    {{/hasDate}}
{{/isStartOfDay}}
{{/scheduledTransactions}}
    }



    @Override
    public void endOfOfDay() {
{{#scheduledTransactions}}
    {{#isEndOfDay}}
        {{#hasSchedule}}
            if (_{{scheduleTypeName}}.isDue(valueDate)){
                BigDecimal amount = {{amountExpression}};
                createTransaction("{{transactionTypeName}}", amount);
            }
        {{/hasSchedule}}
        {{#hasDate}}
            if (_{{dateTypeName}}.isDue(valueDate)){
                BigDecimal amount = {{amountExpression}};
                createTransaction("{{transactionTypeName}}", amount);
            }
        {{/hasDate}}
    {{/isEndOfDay}}
{{/scheduledTransactions}}
    }

    @Override
    public void onDataChanged() {

    }

    @Override
    public void calculateInstaments() {

    }

    @Override
    public String generatedAt(){
        return "{{#currentTimestamp}}generate{{/currentTimestamp}}";
    }
}
